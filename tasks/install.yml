---
- name: clean gpg keyring
  file:
    path: "{{ passbolt_gpg_keyring }}"
    state: absent
  tags:
    - configure

- name: create passbolt directories
  file:
    path: "{{ item | dirname }}"
    state: directory
  with_items:
    - "{{ passbolt_web_root }}/.composer"
    - "{{ passbolt_temp }}"
    - "{{ passbolt_gpg_privkey }}"
    - "{{ passbolt_gpg_pubkey }}"
  tags:
    - configure

- name: clone passbolt repository
  git:
    repo: https://github.com/passbolt/passbolt_api.git
    dest: "{{ passbolt_root }}"
    version: "{{ passbolt_release }}"
    force: yes
  notify:
    - restart nginx
  tags:
    - configure

- name: loading passbolt gpg keys
  copy:
    content: |
      {{ item.cont }}
    dest: "{{ item.dest }}"
    owner: "{{ passbolt_user }}"
    group: "{{ passbolt_group }}"
    mode: 0640
  with_items:
    - cont: "{{ passbolt_gpg_privkey_secret }}"
      dest: "{{ passbolt_gpg_privkey }}"
    - cont: "{{ passbolt_gpg_pubkey_secret }}"
      dest: "{{ passbolt_gpg_pubkey }}"
  no_log: yes
  tags:
    - configure

- name: create passbolt gpg keyring
  file:
    state: directory
    path: "{{ passbolt_gpg_keyring }}"
    owner: "{{ passbolt_user }}"
    group: "{{ passbolt_group }}"
    mode: 0700
  tags:
    - configure

- name: fix passbolt directory permissions
  file:
    path: "{{ passbolt_web_root }}"
    owner: "{{ passbolt_user }}"
    group: "{{ passbolt_group }}"
    mode: "u+rw"
    state: directory
    recurse: yes
  tags:
    - configure

- name: Use composer to install dependencies
  composer:
    command: install
    working_dir: "{{ passbolt_root }}"
    no_dev: yes
  become_user: "{{ passbolt_user }}"
  tags:
    - configure

- name: import passbolt gpg keyring keys
  shell: "gpg --home {{ passbolt_gpg_keyring }} --import {{ item }}"
  with_items:
    - "{{ passbolt_gpg_privkey }}"
    - "{{ passbolt_gpg_pubkey }}"
  become_user: "{{ passbolt_user }}"
  tags:
    - skip_ansible_lint
    - configure

- name: create passbolt configuration file
  template:
    src: templates/passbolt.php.j2
    dest: "{{ passbolt_root }}/config/passbolt.php"
    owner: "{{ passbolt_user }}"
    group: "{{ passbolt_group }}"
    mode: 0750
  vars:
    base_url: "{{ passbolt_url }}"
    db_host: localhost
    db_name: "{{ passbolt_db_name }}"
    db_user: "{{ passbolt_db_user }}"
    db_pass: "{{ passbolt_db_pass }}"
    email_address: "{{ passbolt_gpg_email }}"
    email_user: "WPN Passbolt"
    email_host: "{{ smtp_host }}"
    email_port: "{{ smtp_port }}"
    keyring: "{{ passbolt_gpg_keyring }}"
    pubkey: "{{ passbolt_gpg_pubkey }}"
    privkey: "{{ passbolt_gpg_privkey }}"
    fingerprint: "{{ passbolt_gpg_fingerprint }}"
  tags:
    - configure

- name: create passbolt log file
  file:
    path: "{{ passbolt_log_file }}"
    state: touch
    owner: "{{ passbolt_user }}"
    group: "{{ passbolt_group }}"
  changed_when: false
  tags:
    - configure

- name: create log cronjob
  cron:
    name: 'passbolt log'
    job: "{{ passbolt_root }}/bin/cron >> {{ passbolt_log_file }}"
    state: present
    user: "{{ passbolt_user }}"
  tags:
    - configure

- name: create email cronjob
  cron:
    name: 'send passbolt emails'
    job: "{{ passbolt_root }}/bin/cake EmailQueue.sender >> {{ passbolt_log_file }}"
    state: present
    user: "{{ passbolt_user }}"
  tags:
    - configure

# If you create a new installation, you need to run> sudo su -s /bin/bash -c "./bin/cake passbolt install" www-data

- name: healthcheck installation
  command: |
    {{ passbolt_root }}/bin/cake passbolt healthcheck
  become_user: "{{ passbolt_user }}"
  register: healthcheck_status
  tags:
    - configure

- debug:
    msg: |
      {{ healthcheck_status }}
  tags:
    - configure
