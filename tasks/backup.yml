---
- name: install nfs client
  include_role:
    name: nephelaiio.nfs
  vars:
    nfs_server: no

- name: mount backup target
  mount:
    src: "{{ passbolt_backup_target.src }}"
    path: "{{ passbolt_backup_target.path }}"
    fstype: "{{ passbolt_backup_target.fstype }}"
    opts: "{{ passbolt_backup_target.opts }}"
    state: "{{ passbolt_backup_target.state }}"
  tags:
    - backup

- name: create passbolt backup script
  template:
    src: templates/passbolt-backup.sh.j2
    dest: "{{ passbolt_backup_bin }}"
    group: root
    owner: root
    mode: 0750
  vars:
    backup_path: "{{ passbolt_backup_target.path }}"
    backup_db: "{{ passbolt_db_name }}"
    backup_db_user: "{{ passbolt_db_user }}"
    backup_db_pass: "{{ passbolt_db_pass }}"
    backup_identifier: "passbolt-{{ inventory_hostname }}"
    backup_replica: "{{ passbolt_slave }}"
    retention_period: "{{ passbolt_retention_backup }}"
  tags:
    - backup
    - replica

- name: create passbolt restore script
  template:
    src: templates/passbolt-restore.sh.j2
    dest: "{{ passbolt_restore_bin }}"
    group: root
    owner: root
    mode: 0750
  vars:
    backup_path: "{{ passbolt_backup_target.path }}"
    backup_db_user: "{{ passbolt_db_user }}"
    backup_db_pass: "{{ passbolt_db_pass }}"
    backup_identifier: "passbolt-{{ inventory_hostname }}"
  tags:
    - restore

- name: manage passbolt backup cronjob
  cron:
    name: passbolt-conf-backup
    job: "{{ passbolt_backup_bin }}"
    special_time: daily
  when: passbolt_backup | default(True)
  tags:
    - backup

- name: create passbolt backup motd pointers
  copy:
    dest: /etc/update-motd.d/99-passbolt
    content: |
      #!/usr/bin/env bash
      echo
      echo run passbolt-backup to manually force passbolt backup creation
      echo run passbolt-restore to manually restore latest passbolt backup
      echo
    mode: 0755
  tags:
    - backup


- block:

    - name: create replication group
      group:
        name: "{{ passbolt_user_replication }}"
        state: present

    - name: create replication user in master
      user:
        name: "{{ passbolt_user_replication }}"
        groups: "{{ passbolt_user_replication }}"
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/passbolt
      delegate_to: passbolt_master

    - name: configure ssh config for replica access
      template:
        src: templates/ssh_config.j2
        dest: "{{ ssh_path }}/config"
        mode: 0600
      vars:
        ssh_path: "/home/{{ passbolt_user_replication }}/.ssh"
        ssh_key_filename: passbolt
        ssh_replica_user: "{{ passbolt_user_replication }}"
        ssh_replica_host: "{{ passbolt_slave }}"
      become_user: "{{ passbolt_user_replication }}"
      delegate_to: passbolt_master
      tags:
        - replica

    - name: read ssh public key
      set_facts:
        passbolt_ssh_public_key: "{{ item }}"
      with_file:
        - "/home/{{ passbolt_user_replication }}/.ssh/passbolt.pub"
      delegate_to: passbolt_master

    - name: create replication user in slave
      user:
        name: "{{ passbolt_user_replication }}"
        groups: "{{ passbolt_user_replication }}"
      delegate_to: passbolt_slave

    - name: configure ssh public key for rsync use
      ansible.posix.authorized_key:
        user: "{{ passbolt_user_replication }}"
        state: present
        key: "{{ passbolt_ssh_public_key }}"
      delegate_to: passbolt_slave
      tags:
        - replica

  when: passbolt_slave is defined
